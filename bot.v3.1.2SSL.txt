30c30
< use IO::Socket;
---
> # use IO::Socket;
31a32
> use IO::Socket::SSL;
186,187c187,191
<     my $tempsock = IO::Socket::INET->new(PeerAddr=>"jotun.ultrazone.org:80",
<                                          Timeout => 15);
---
>     my $tempsock = IO::Socket::SSL->new(
>         PeerAddr => "jotun.ultrazone.org:443",  # Update port to 443 for HTTPS
>         Timeout  => 15,
>         SSL_verify_mode => 0  # No SSL verification for this example
>     );
227,232c231,287
<     debug("Connecting to $opts{servers}->[0]...");
<     my %sockinfo = (PeerAddr => $opts{servers}->[0],
<                     PeerPort => 6667);
<     if ($opts{localaddr}) { $sockinfo{LocalAddr} = $opts{localaddr}; }
<     $sock = IO::Socket::INET->new(%sockinfo) or
<         debug("Error: failed to connect: $!\n");
---
>     my $server_to_connect = $opts{servers}->[0];
>     my $port_to_connect = 6697;  # or whatever port you're using
>     
>     debug("Attempting to connect to Server: $server_to_connect, Port: $port_to_connect");
>     
>     my %sockinfo = (
>         PeerAddr => $server_to_connect,
>         PeerPort => $port_to_connect,
>         Proto    => 'tcp',
>         SSL_verify_mode => 0
>     );
>     
>     if ($opts{localaddr}) {
>         $sockinfo{LocalAddr} = $opts{localaddr};
>         debug("Using LocalAddr: $opts{localaddr}");
>     }
>     
>     $sock = IO::Socket::SSL->new(%sockinfo);
>     
> $sock = IO::Socket::SSL->new(%sockinfo);
>     
> if ($sock) {
>     debug("Successfully connected to $opts{servers}->[0]:6697.");
> 
>     # Display SSL certificate information
>     my $issuer  = $sock->peer_certificate("issuer");
>     my $subject = $sock->peer_certificate("subject");
>     my $common_name = $sock->peer_certificate("commonName");
> 
>     debug("SSL Certificate Information:");
>     debug("Issuer: $issuer");
>     debug("Subject: $subject");
>     debug("Common Name: $common_name");
>     
>     # Explicitly set the socket to blocking mode
>     $sock->blocking(1);
>     
>     my $read_set = IO::Select->new($sock);
>     if ($read_set->can_read(5)) {
>         my $welcome_msg = "";
>         my $bytes_received = sysread($sock, $welcome_msg, 512);
>         
>         if ($bytes_received) {
>             debug("Received $bytes_received bytes from server: $welcome_msg");
>         } else {
>             debug("Received 0 bytes from server. Something might be wrong.");
>         }
>         
>     } else {
>         debug("No data received from server within 5 seconds.");
>     }
>     
> } else {
>     debug("Failed to connect to $opts{servers}->[0]:6697. Error: $!");
> }
> 
>     
233a289
>     
235,236c291,294
<         # cycle front server to back if connection failed
<         push(@{$opts{servers}},shift(@{$opts{servers}}));
---
>         debug("Connection attempt failed. Cycling to next server...");
>         push(@{$opts{servers}}, shift(@{$opts{servers}}));
>     } else {
>         debug("Connection established.");
238d295
<     else { debug("Connected."); }
242c299
<     debug("Error: Too many connection failures, exhausted server list.\n",1);
---
>     debug("Too many connection failures. Exhausted server list.");
244a302
> 
257c315
<         $fh->recv($buffer2,512,0);
---
>         sysread($fh, $buffer2, 512);  # Using sysread instead of recv
258a317
>             debug("Received from server: $buffer2");  # Debug statement
267,270c326
<             # uh oh, we've been disconnected from the server, possibly before
<             # we've logged in the users in %auto_login. so, we'll set those
<             # users' online flags to 1, rewrite db, and attempt to reconnect
<             # (if that's wanted of us)
---
>             debug("No data received. Disconnecting.");  # Debug statement
289c345,347
<     else { select(undef,undef,undef,1); }
---
>     else {
>         debug("Nothing readable. Waiting.");  # Debug statement
>     }
547,555c605,615
<                         if ($opts{phonehome}) {
<                             my $tempsock = IO::Socket::INET->new(PeerAddr=>
<                                 "jotun.ultrazone.org:80");
<                             if ($tempsock) {
<                                 print $tempsock
<                                     "GET /g7/count.php?new=1 HTTP/1.1\r\n".
<                                     "Host: jotun.ultrazone.org:80\r\n\r\n";
<                                 sleep(1);
<                                 close($tempsock);
---
> if ($opts{phonehome}) {
>     my $tempsock = IO::Socket::SSL->new(
>         PeerAddr => "jotun.ultrazone.org:443",  # Update port to 443 for HTTPS
>         SSL_verify_mode => 0  # No SSL verification for this example
>     );
>     if ($tempsock) {
>         print $tempsock
>             "GET /g7/count.php?new=1 HTTP/1.1\r\n".
>             "Host: jotun.ultrazone.org:443\r\n\r\n";  # Update port to 443
>         sleep(1);
>         close($tempsock);
1740a1801,1802
>     debug("Starting daemonization process...");
> 
1743c1805
<         print debug("Nevermind, this is Win32, no I'm not.")."\n";
---
>         debug("Running on Win32, skipping daemonization.");
1745a1808
> 
1746a1810
>     debug("Setting SIG{CHLD} to empty subroutine.");
1747a1812,1813
> 
>     debug("Forking first child...");
1749c1815,1819
<     POSIX::setsid() || debug("POSIX::setsid() failed: $!",1);
---
> 
>     debug("Creating new session...");
>     POSIX::setsid() || debug("POSIX::setsid() failed: $!", 1);
> 
>     debug("Forking second child...");
1752,1758c1822,1830
<     $SIG{CHLD} = sub { };
<     open(STDIN,'/dev/null') || debug("Cannot read /dev/null: $!",1);
<     open(STDOUT,'>/dev/null') || debug("Cannot write to /dev/null: $!",1);
<     open(STDERR,'>/dev/null') || debug("Cannot write to /dev/null: $!",1);
<     # write our PID to $opts{pidfile}, or return semi-silently on failure
<     open(PIDFILE,">$opts{pidfile}") || do {
<         debug("Error: failed opening pid file: $!");
---
> 
> #    debug("Redirecting STDIN, STDOUT, STDERR to /dev/null...");
> #    open(STDIN, '/dev/null') || debug("Cannot read /dev/null: $!", 1);
> #    open(STDOUT, '>/dev/null') || debug("Cannot write to /dev/null: $!", 1);
> #    open(STDERR, '>/dev/null') || debug("Cannot write to /dev/null: $!", 1);
> 
>     debug("Writing PID to $opts{pidfile}...");
>     open(PIDFILE, ">$opts{pidfile}") || do {
>         debug("Failed to open pid file: $!");
1762a1835,1836
> 
>     debug("Daemonization complete.");
